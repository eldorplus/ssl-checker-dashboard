# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    paths-ignore:
      - 'README.*'
      - 'img/**'
      - 'k8s/**'
    branches:
      - master
    tags:
      - v*

  pull_request:
    paths-ignore:
      - 'README.*'
      - 'img/**'
      - 'k8s/**'
    branches:
      - master


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Integration test
      run: |
        #!/usr/bin/env bash
        docker-compose -f docker-compose-test.yml stop -t 0
        docker-compose -f docker-compose-test.yml rm -f

        set -e -x

        echo '

        google.com
        ya.ru
        notexisting.domain

        ' > cron/domains.lst
        docker-compose -f docker-compose-test.yml build
        docker-compose -f docker-compose-test.yml up -d cron redis
        sleep 5
        docker-compose -f docker-compose-test.yml ps
        docker-compose -f docker-compose-test.yml logs redis
        docker-compose -f docker-compose-test.yml logs cron
        docker-compose -f docker-compose-test.yml exec -T redis redis-cli --scan
        docker-compose -f docker-compose-test.yml up -d web-app
        sleep 2
        docker-compose -f docker-compose-test.yml ps
        curl localhost:8080 | grep href
        curl -s -o /dev/null -w "%{http_code}" localhost:8080/health | grep 200
        curl -s localhost:8080 | grep 'google.com'
        curl -s localhost:8080/all | grep 'google.com'
        curl -s localhost:8080/days | grep 'google.com'
        curl -s localhost:8080/errors | grep 'notexisting.domain'

        docker cp cron/domains_medium.lst ssl-checker-dashboard_cron_1:/home/app/domains.lst
        sleep 30
        docker-compose -f docker-compose-test.yml logs cron
        docker-compose -f docker-compose-test.yml exec -T redis redis-cli --scan
        docker-compose -f docker-compose-test.yml ps
        curl localhost:8080 | grep href
        curl -s -o /dev/null -w "%{http_code}" localhost:8080/health | grep 200
        curl -s localhost:8080 | grep 'google.com'
        curl -s localhost:8080/all | grep 'google.com'
        curl -s localhost:8080/days | grep 'google.com'
        curl -s localhost:8080/errors | grep 'notexisting.domain'
        
        docker-compose -f docker-compose-test.yml stop -t 0
        docker-compose -f docker-compose-test.yml rm -f

        git checkout -- cron/domains.lst
        docker-compose -f docker-compose-test.yml build
        docker-compose -f docker-compose-test.yml up -d cron redis
        sleep 40
        docker-compose -f docker-compose-test.yml ps
        docker-compose -f docker-compose-test.yml logs redis
        docker-compose -f docker-compose-test.yml logs cron
        docker-compose -f docker-compose-test.yml exec -T redis redis-cli  --scan
        docker-compose -f docker-compose-test.yml up -d web-app
        sleep 10
        docker-compose -f docker-compose-test.yml ps
        curl localhost:8080 | grep href
        curl -s -o /dev/null -w "%{http_code}" localhost:8080/health | grep 200
        curl -s localhost:8080 | grep 'google.com'
        curl -s localhost:8080/all | grep 'google.com'
        curl -s localhost:8080/days | grep 'google.com'
        curl -s localhost:8080/errors | grep 'notexisting.domain'
        docker-compose -f docker-compose-test.yml stop -t 0
        docker-compose -f docker-compose-test.yml rm -f

    - name: Build app image
      run: docker build app/ --file app/Dockerfile --tag ssl-checker

    - name: Build cron image
      run: docker build cron/ --file cron/Dockerfile --tag ssl-checker-cron

    - name: Log into registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Push app image
      run: |
        IMAGE_ID=vensder/ssl-checker

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag ssl-checker $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

    - name: Push cron image
      run: |
        IMAGE_ID=vensder/ssl-checker-cron

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag ssl-checker-cron $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION